pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'
        IMAGE_NAME = 'nodeapplication'
        IMAGE_TAG = 'latest'
        AWS_CREDENTIALS_ID = '5bee2370-6a4f-4d90-a51a-52eb5632c548'
        ECR_REPO_URL = 'public.ecr.aws/s3x0y0f3'
        NGROK_URL='https://3e40-103-163-248-113.ngrok-free.app'
        cluster = "nodejs-cluster"
        service = "node-service"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build Docker Image') { 
       steps{
         script {
                    // Build Docker image
                    def customImage = docker.build("${IMAGE_NAME}:${IMAGE_TAG}", './NodeJsApp')
                    
                    // Run a command inside the Docker container
                    sh "docker run -p 3000:3000 -d ${IMAGE_NAME}:${IMAGE_TAG}"
             

                }}
        }

        stage('Check Running Process and push to ECR') {
            steps {
                script {
                    def processName = 'server.js'
                    def isRunning = sh(script: "ps aux | grep -v grep | grep ${processName}", returnStatus: true) == 0

                    if (isRunning) {
                        echo "${processName} is running."
                        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY', credentialsId: '5bee2370-6a4f-4d90-a51a-52eb5632c548']]) {
                        sh "aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/s3x0y0f3"
                        sh "docker tag ${IMAGE_NAME}:${IMAGE_TAG} public.ecr.aws/s3x0y0f3/nodejs-container:latest"
                        sh "docker push public.ecr.aws/s3x0y0f3/nodejs-container:latest"
                        } 


                        }
                     else {
                        error("${processName} is not running.")
                    }
                }
            }
        }
        stage('Deploy to ECS') {
          when {
                // Define the condition for manual trigger
                expression { currentBuild.resultIsBetterOrEqualTo('SUCCESS') }
            }
          steps {
            withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY', credentialsId: '5bee2370-6a4f-4d90-a51a-52eb5632c548']])  {
            sh 'aws ecs update-service --cluster ${cluster} --service ${service} --force-new-deployment --region us-east-1'
        }
      }
     }
    }
    }



