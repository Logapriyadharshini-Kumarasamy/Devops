pipeline {
    agent any

    environment {
        AWS_REGION = 'us-east-1'
        IMAGE_NAME = 'nodeapplication'
        IMAGE_TAG = 'latest'
        AWS_CREDENTIALS_ID = '5bee2370-6a4f-4d90-a51a-52eb5632c548'
        ECR_REPO_URL = 'public.ecr.aws/s3x0y0f3'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${IMAGE_NAME}:${IMAGE_TAG}", './NodeJsApp')
                }
            }
        }

        stage('Check Running Process') {
            steps {
                script {
                    def processName = 'server.js'
                    def isRunning = sh(script: "ps aux | grep -v grep | grep ${processName}", returnStatus: true) == 0

                    if (isRunning) {
                        echo "${processName} is running."
                        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY', credentialsId: '5bee2370-6a4f-4d90-a51a-52eb5632c548']]) {
                        sh "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REPO_URL}"
                        sh "docker tag ${IMAGE_NAME}:${IMAGE_TAG} ${ECR_REPO_URL}/${IMAGE_NAME}:${IMAGE_TAG}"
                        sh "docker push ${ECR_REPO_URL}/${IMAGE_NAME}:${IMAGE_TAG}" 
                        } 


                        }
                     else {
                        error("${processName} is not running.")
                    }
                }
            }
        }
    }}

